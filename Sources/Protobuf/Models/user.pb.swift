// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Models/user.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct User {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String {
    get {return _id ?? String()}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {self._id = nil}

  public var firstName: String = String()

  public var lastName: String = String()

  public var email: String = String()

  public var password: String {
    get {return _password ?? String()}
    set {_password = newValue}
  }
  /// Returns true if `password` has been explicitly set.
  public var hasPassword: Bool {return self._password != nil}
  /// Clears the value of `password`. Subsequent reads from it will return its default value.
  public mutating func clearPassword() {self._password = nil}

  public var userType: User.UserType = .student

  public var deviceIds: [String] = []

  public var imageURL: String {
    get {return _imageURL ?? String()}
    set {_imageURL = newValue}
  }
  /// Returns true if `imageURL` has been explicitly set.
  public var hasImageURL: Bool {return self._imageURL != nil}
  /// Clears the value of `imageURL`. Subsequent reads from it will return its default value.
  public mutating func clearImageURL() {self._imageURL = nil}

  public var isEmailVerified: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum UserType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case student // = 0
    case ambassador // = 1
    case admin // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .student
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .student
      case 1: self = .ambassador
      case 2: self = .admin
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .student: return 0
      case .ambassador: return 1
      case .admin: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _id: String? = nil
  fileprivate var _password: String? = nil
  fileprivate var _imageURL: String? = nil
}

#if swift(>=4.2)

extension User.UserType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [User.UserType] = [
    .student,
    .ambassador,
    .admin,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension User: @unchecked Sendable {}
extension User.UserType: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension User: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "User"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "firstName"),
    3: .same(proto: "lastName"),
    4: .same(proto: "email"),
    5: .same(proto: "password"),
    6: .same(proto: "userType"),
    7: .same(proto: "deviceIDs"),
    8: .same(proto: "imageURL"),
    9: .same(proto: "isEmailVerified"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.firstName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.lastName) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.email) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._password) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.userType) }()
      case 7: try { try decoder.decodeRepeatedStringField(value: &self.deviceIds) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self._imageURL) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self.isEmailVerified) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    if !self.firstName.isEmpty {
      try visitor.visitSingularStringField(value: self.firstName, fieldNumber: 2)
    }
    if !self.lastName.isEmpty {
      try visitor.visitSingularStringField(value: self.lastName, fieldNumber: 3)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 4)
    }
    try { if let v = self._password {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    if self.userType != .student {
      try visitor.visitSingularEnumField(value: self.userType, fieldNumber: 6)
    }
    if !self.deviceIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.deviceIds, fieldNumber: 7)
    }
    try { if let v = self._imageURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
    } }()
    if self.isEmailVerified != false {
      try visitor.visitSingularBoolField(value: self.isEmailVerified, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: User, rhs: User) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs.firstName != rhs.firstName {return false}
    if lhs.lastName != rhs.lastName {return false}
    if lhs.email != rhs.email {return false}
    if lhs._password != rhs._password {return false}
    if lhs.userType != rhs.userType {return false}
    if lhs.deviceIds != rhs.deviceIds {return false}
    if lhs._imageURL != rhs._imageURL {return false}
    if lhs.isEmailVerified != rhs.isEmailVerified {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension User.UserType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STUDENT"),
    1: .same(proto: "AMBASSADOR"),
    2: .same(proto: "ADMIN"),
  ]
}
