// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Requests/createContentRequest.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct CreateContentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var ambassadorID: String = String()

  public var title: String = String()

  public var videoURL: String {
    get {return _videoURL ?? String()}
    set {_videoURL = newValue}
  }
  /// Returns true if `videoURL` has been explicitly set.
  public var hasVideoURL: Bool {return self._videoURL != nil}
  /// Clears the value of `videoURL`. Subsequent reads from it will return its default value.
  public mutating func clearVideoURL() {self._videoURL = nil}

  public var imageURL: String {
    get {return _imageURL ?? String()}
    set {_imageURL = newValue}
  }
  /// Returns true if `imageURL` has been explicitly set.
  public var hasImageURL: Bool {return self._imageURL != nil}
  /// Clears the value of `imageURL`. Subsequent reads from it will return its default value.
  public mutating func clearImageURL() {self._imageURL = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _videoURL: String? = nil
  fileprivate var _imageURL: String? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension CreateContentRequest: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension CreateContentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "CreateContentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ambassadorID"),
    3: .same(proto: "title"),
    4: .same(proto: "videoURL"),
    5: .same(proto: "imageURL"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.ambassadorID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._videoURL) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._imageURL) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.ambassadorID.isEmpty {
      try visitor.visitSingularStringField(value: self.ambassadorID, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 3)
    }
    try { if let v = self._videoURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._imageURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: CreateContentRequest, rhs: CreateContentRequest) -> Bool {
    if lhs.ambassadorID != rhs.ambassadorID {return false}
    if lhs.title != rhs.title {return false}
    if lhs._videoURL != rhs._videoURL {return false}
    if lhs._imageURL != rhs._imageURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
